# SPDX-License-Identifier: Apache-2.0 OR ISC OR MIT

name: Bench (Ubuntu PMU 512)

on:
  push:

permissions:
  contents: read

jobs:
  bench-pmu-512:
    name: Ubuntu PMU ML-KEM-512
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential python3

      - name: Build ML-KEM-512 benchmark (optimized)
        run: make bench_512 CYCLES=PMU OPT=1 -j"$(nproc)"

      - name: Run ML-KEM-512 benchmark (capture output)
        run: |
          make run_bench_512 CYCLES=PMU EXEC_WRAPPER="taskset -c 0" | tee bench_512.txt

      - name: Publish job summary
        run: |
          python3 - <<'PY'
          import os, re, platform
          txt = open('bench_512.txt','r',encoding='utf-8',errors='ignore').read()
          m = dict(re.findall(r'(keypair cycles|encaps cycles|decaps cycles)\s*=\s*(\d+)', txt))
          # Parse percentile lines, e.g. "keypair percentiles:   1% 10% ... 99%"
          pct_map = {}
          for prim in ('keypair','encaps','decaps'):
            mo = re.search(rf'^\s*{prim}\s+percentiles:\s+(.+)$', txt, flags=re.M)
            if mo:
              # Split on whitespace and keep numeric fields
              nums = [int(x) for x in mo.group(1).split() if x.isdigit()]
              pct_map[prim] = nums
          rows = [
            ('keypair cycles','Keypair'),
            ('encaps cycles','Encaps'),
            ('decaps cycles','Decaps'),
          ]
          if not all(k in m for k,_ in rows):
            raise SystemExit('No cycle results found in bench_512.txt')
          # Collect host CPU/TSC info
          arch = platform.machine()
          model = None
          mhz = None
          flags = ''
          try:
            ci = open('/proc/cpuinfo','r',encoding='utf-8',errors='ignore').read()
            mm = re.search(r'^model name\s*:\s*(.+)$', ci, flags=re.M)
            if mm: model = mm.group(1).strip()
            fm = re.search(r'^cpu MHz\s*:\s*([0-9.]+)$', ci, flags=re.M)
            if fm: mhz = float(fm.group(1))
            fl = re.search(r'^flags\s*:\s*(.+)$', ci, flags=re.M)
            if fl: flags = fl.group(1)
          except Exception:
            pass
          current_clock = None
          avail_clock = None
          try:
            current_clock = open('/sys/devices/system/clocksource/clocksource0/current_clocksource').read().strip()
          except Exception:
            pass
          try:
            avail_clock = open('/sys/devices/system/clocksource/clocksource0/available_clocksource').read().strip()
          except Exception:
            pass

          invariant = 'constant_tsc' in flags or 'nonstop_tsc' in flags

          # Build summary
          lines = []
          lines.append('## ML-KEM-512 TSC Tick Counts (x86_64 via RDTSC)')
          lines.append('')
          lines.append('- Note: These are TSC ticks (PMU=RDTSC), not core cycles.')
          lines.append('')
          # We will only show percentiles (ticks), so omit a separate median table

          # Percentiles table (TSC ticks)
          # Bench prints percentiles for [1,10,20,30,40,50,60,70,80,90,99]
          idx = {50:5, 90:9, 99:10}
          prims = ('keypair','encaps','decaps')
          have_pcts = all(prim in pct_map and len(pct_map[prim]) >= max(idx.values())+1 for prim in prims)
          if have_pcts:
            lines.append('')
            lines.append('### Percentiles (TSC ticks per op)')
            lines.append('| Primitive | P50 | P90 | P99 |')
            lines.append('|---|---:|---:|---:|')
            name_map = {'keypair':'Keypair','encaps':'Encaps','decaps':'Decaps'}
            for prim in prims:
              p50 = pct_map[prim][idx[50]]
              p90 = pct_map[prim][idx[90]]
              p99 = pct_map[prim][idx[99]]
              lines.append(f"| {name_map[prim]} | {p50:,} | {p90:,} | {p99:,} |")

          # No Âµs table: we only report TSC ticks (P50/P90/P99)

          # Host/clock info
          lines.append('')
          lines.append('### Host Info')
          lines.append(f"- Arch: {arch}")
          if model:
            lines.append(f"- CPU: {model}")
          if mhz:
            lines.append(f"- cpu MHz (reported): {mhz:.2f}")
          with open(os.environ['GITHUB_STEP_SUMMARY'],'a',encoding='utf-8') as f:
            f.write("\n".join(lines) + "\n")
          PY
